{% extends 'profile/index.html.twig' %}

{% block filtreProfile %}

		<!-- Nouveau bouton de paramètres pour filtrer les catégories -->
							<div class="relative" id="category-filter-container">
								<button id="toggleCategoryFilter" class="text-gray-600 hover:text-[#F48023] transition-colors duration-300 p-2 rounded-lg hover:bg-orange-50">
									<i class="fas fa-sliders-h text-xl"></i>
								</button>
								
								<!-- Popup de filtre de catégories -->
								<div id="categoryFilterPopup" class="hidden absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-lg border border-gray-100 z-10 transform origin-top-right">
									<div class="p-4">
										<h3 class="font-semibold text-gray-900 mb-3">Filtrer par catégorie</h3>
										<div class="space-y-2 max-h-48 overflow-y-auto">
											<!-- Les cases à cocher seront ajoutées dynamiquement -->
											{# {% for category in categories %} #}
											<label class="flex items-center gap-2 cursor-pointer hover:bg-gray-50 p-2 rounded">
												<input type="checkbox" class="category-filter-checkbox w-4 h-4 text-[#F48023] border-gray-300 rounded focus:ring-[#F48023]" 
													value=""
													{# {% if selectedCategories is defined and category.id in selectedCategories %}checked{% endif %}> #}
												<span class="text-sm text-gray-700">test</span>
											</label>
											{# {% endfor %} #}
										</div>
										<div class="mt-4 flex justify-between">
											<button id="clearCategoryFilters" class="text-sm text-gray-600 hover:text-gray-800">
												Réinitialiser
											</button>
											<button id="applyCategoryFilters" class="text-sm bg-[#F48023] hover:bg-[#E47013] text-white px-4 py-1 rounded-lg transition-colors">
												Appliquer
											</button>
										</div>
									</div>
								</div>
							</div>



                            <script>
                            
                            
                            // Code pour le filtre de catégories
			const toggleButton = document.getElementById('toggleCategoryFilter');
			const popup = document.getElementById('categoryFilterPopup');
			const questionsContainer = document.getElementById('questions-container');
			const questionItems = document.querySelectorAll('.question-item');
			const noQuestionsMessage = document.getElementById('no-questions-message');
			const noFilteredQuestionsMessage = document.getElementById('no-filtered-questions-message');
			const applyFiltersButton = document.getElementById('applyCategoryFilters');
			const clearFiltersButton = document.getElementById('clearCategoryFilters');
			
			// Fermer la popup si on clique ailleurs
			document.addEventListener('click', function(event) {
				if (!popup.contains(event.target) && event.target !== toggleButton) {
					popup.classList.add('hidden');
				}
			});
			
			// Afficher/masquer la popup
			toggleButton.addEventListener('click', function(event) {
				event.stopPropagation();
				popup.classList.toggle('hidden');
			});
			
			// Appliquer les filtres
			applyFiltersButton.addEventListener('click', function() {
				const checkboxes = document.querySelectorAll('.category-filter-checkbox:checked');
				const selectedCategories = Array.from(checkboxes).map(cb => cb.value);
				
				let visibleCount = 0;
				
				// Si aucune catégorie n'est sélectionnée, afficher toutes les questions
				if (selectedCategories.length === 0) {
					questionItems.forEach(item => {
						item.classList.remove('hidden');
						visibleCount++;
					});
				} else {
					// Sinon, filtrer les questions selon les catégories sélectionnées
					questionItems.forEach(item => {
						const categoryId = item.getAttribute('data-category');
						if (selectedCategories.includes(categoryId)) {
							item.classList.remove('hidden');
							visibleCount++;
						} else {
							item.classList.add('hidden');
						}
					});
				}
				
				// Afficher/masquer le message "Aucune question" selon les résultats
				if (visibleCount === 0) {
					if (noQuestionsMessage) noQuestionsMessage.classList.add('hidden');
					noFilteredQuestionsMessage.classList.remove('hidden');
				} else {
					if (noQuestionsMessage) noQuestionsMessage.classList.add('hidden');
					noFilteredQuestionsMessage.classList.add('hidden');
				}
				
				popup.classList.add('hidden');
			});
			
			// Réinitialiser les filtres
			clearFiltersButton.addEventListener('click', function() {
				const checkboxes = document.querySelectorAll('.category-filter-checkbox');
				checkboxes.forEach(cb => {
					cb.checked = false;
				});
				
				questionItems.forEach(item => {
					item.classList.remove('hidden');
				});
				
				if (noQuestionsMessage && questionItems.length === 0) {
					noQuestionsMessage.classList.remove('hidden');
				}
				noFilteredQuestionsMessage.classList.add('hidden');
			});
		});
                            </script>

{% endblock %}