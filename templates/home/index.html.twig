{% extends 'base.html.twig' %}

{% block title %}Accueil
{% endblock %}

{% block body %}


	{#message flash quand on bloque un utilisateur  #}
	{% for message in app.flashes('userBloquer') %}
		<div class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 animate-fade-in-down">
			<div class="bg-green-50 border-l-4 border-green-400 p-4 rounded-lg shadow-lg
										                    flex items-center gap-3
										                    min-w-[280px] sm:min-w-[320px] md:min-w-[384px]
										                    max-w-[90vw] sm:max-w-[400px] md:max-w-[448px]">
				<div class="flex-shrink-0">
					<svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
					</svg>
				</div>
				<div class="flex-1">
					<p class="text-sm sm:text-base text-green-700 font-medium">
						{{ message }}
					</p>
				</div>
				<button onclick="this.parentElement.parentElement.remove()" class="flex-shrink-0 text-green-400 hover:text-green-600 transition-colors duration-200">
					<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
					</svg>
				</button>
			</div>
		</div>
	{% endfor %}
	{# fin du code  #}

	{#message flash quand on aime plus un post  #}
	{% for message in app.flashes('aimePlus') %}
		<div class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 animate-fade-in-down">
			<div class="bg-green-50 border-l-4 border-red-700 p-4 rounded-lg shadow-lg
										                    flex items-center gap-3
										                    min-w-[280px] sm:min-w-[320px] md:min-w-[384px]
										                    max-w-[90vw] sm:max-w-[400px] md:max-w-[448px]">
				<div class="flex-shrink-0">
					<svg class="h-5 w-5 text-red-700" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
					</svg>
				</div>
				<div class="flex-1">
					<p class="text-sm sm:text-base text-red-700 font-medium">
						{{ message }}
					</p>
				</div>
				<button onclick="this.parentElement.parentElement.remove()" class="flex-shrink-0 text-red-700 hover:text-red-700 transition-colors duration-200">
					<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
					</svg>
				</button>
			</div>
		</div>
	{% endfor %}
	{# fin du code  #}

	{#message flash quand on ajoute un ami  #}
	{% for message in app.flashes('ajoutMarche') %}
		<div class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50 animate-fade-in-down">
			<div class="bg-green-50 border-l-4 border-green-400 p-4 rounded-lg shadow-lg
										                    flex items-center gap-3
										                    min-w-[280px] sm:min-w-[320px] md:min-w-[384px]
										                    max-w-[90vw] sm:max-w-[400px] md:max-w-[448px]">
				<div class="flex-shrink-0">
					<svg class="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
					</svg>
				</div>
				<div class="flex-1">
					<p class="text-sm sm:text-base text-green-700 font-medium">
						{{ message }}
					</p>
				</div>
				<button onclick="this.parentElement.parentElement.remove()" class="flex-shrink-0 text-green-400 hover:text-green-600 transition-colors duration-200">
					<svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
					</svg>
				</button>
			</div>
		</div>
	{% endfor %}
	{# fin du code #}

	<main
		class="min-h-screen bg-gradient-to-b from-white to-gray-50 py-8 px-4 md:py-12 lg:py-16">
		{# Catégories (Tags) #}
		<section class="container px-4 mx-auto mb-4 sm:mb-6 md:mb-8">
			<div class="flex flex-wrap gap-1.5 xs:gap-2 sm:gap-3 md:gap-4 justify-center">
				<a href="#" class="mb-1.5 sm:mb-2 transition-transform hover:scale-105 duration-300" data-group="all" onclick="filterPosts(event, 'all')">
					<span class="bg-[#F48023] hover:bg-[#e67620] text-white px-2 py-1 sm:px-3 sm:py-1.5 md:px-4 md:py-2 rounded-full text-xs sm:text-sm md:text-base font-medium shadow-sm">tout</span>
				</a>
				{% for theme in category %}
					<a href="#" class="mb-1.5 sm:mb-2 transition-transform hover:scale-105 duration-300" data-group="{{ theme.slug }}" onclick="filterPosts(event, '{{ theme.slug }}')">
						<span class="bg-[#F48023] hover:bg-[#e67620] text-white px-2 py-1 sm:px-3 sm:py-1.5 md:px-4 md:py-2 rounded-full text-xs sm:text-sm md:text-base font-medium shadow-sm">{{theme.name}}</span>
					</a>
				{% endfor %}
			</div>
		</section>

		{# Publications #}
		<div class="container mx-auto">
			{% for question in publication %}
				<section class="mb-10 md:mb-14 lg:mb-16 flex justify-center" data-group="{{ question.category.slug }}">
					<article
						class="bg-white shadow-lg rounded-xl w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-2xl xl:max-w-3xl overflow-hidden transition-all duration-300 hover:shadow-xl" data-groups='["all", "{{question.category.slug}}"]'>
						{# En-tête avec profil utilisateur #}
						<div class="p-5 sm:p-6 md:p-8 border-b border-gray-100">
							<div class="flex items-center gap-4">
								<img src="{{ question.user.photo ? asset('uploads/uploads/' ~ question.user.photo) : asset('img/icon.jpg') }}" alt="Photo de profil de {{ question.user.name }}" class="rounded-full w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 object-cover ring-2 ring-[#F48023]/20">

								<div class="flex-1">
									<a href="{{path('app_user_profile', {'name': question.user.name})}}">
										<h3 class="text-lg sm:text-xl font-medium text-gray-800">{{ question.user.name }}</h3>
									</a>
									<p class="text-sm text-gray-500">{{question.createdAt|date('d M Y à H:i')}}</p>
								</div>

								<div
									class="relative">
									{# button pour bloquer ajoutez ou bloquer #}
									<button class="h-8 w-8 rounded-full flex items-center justify-center hover:bg-gray-100 transition-colors duration-200" onclick="togglePopup(event)" aria-label="Options">
										<i class="fa-solid fa-ellipsis text-gray-700 hover:text-[#F48023]"></i>
									</button>

									<div class="popup hidden absolute z-10 bg-white shadow-xl rounded-lg p-3 -right-2 mt-1 w-36 transform transition-all duration-200 ease-in-out opacity-0">
										<div
											class="relative">
											{# Flèche du popup #}
											<div class="absolute w-3 h-3 bg-white transform rotate-45 -top-1 right-3"></div>
											{# Contenu #}
											<div class="flex flex-col gap-3">
												<a href="{{path('app_home_ajout',{id: question.user.id})}}" class="text-sm text-gray-700 hover:text-[#F48023] flex items-center gap-2 w-full text-left transition-colors duration-200 py-1" onclick="addUser('{{ question.user.id }}')">
													<i class="fas fa-user-plus text-xs"></i>
													<span>Ajouter</span>
												</a>
												<a href="{{path('app_block',{id: question.user.id})}}" class="text-sm text-gray-700 hover:text-red-500 flex items-center gap-2 w-full text-left transition-colors duration-200 py-1" onclick="blockUser('{{ question.user.id }}')">
													<i class="fas fa-ban text-xs"></i>
													<span>Bloquer</span>
												</a>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>


						{# Corps de la publication #}
						<div class="p-5 sm:p-6 md:p-8">
							<h2 class="text-xl sm:text-2xl md:text-3xl font-bold text-gray-900 mb-3">{{ question.title }}</h2>

							{% if question.category.name == 'Programmation' and question.langage %}
								{# Composant de bloc de code avec prise en charge de tous les breakpoints Tailwind #}
								<div
									class="relative w-full my-8">
									{# Conteneur du bloc de code avec ombrage et animation subtile au survol #}
									<div
										class="mt-1">
										{# En-tête du bloc de code avec le nom du langage #}
										<div class="flex items-center justify-between px-4 py-2 text-xs font-semibold text-gray-100 bg-gray-800 rounded-t-lg border-b border-gray-700">
											<div class="flex items-center space-x-2">
												<span class="hidden sm:inline-block">{{ question.langage.name }}</span>
												<span class="inline-block sm:hidden">{{ question.langage.name|slice(0, 3) }}</span>
											</div>
											<div
												class="flex items-center space-x-2">
												{# Boutons d'interface #}
												<span class="w-3 h-3 bg-red-500 rounded-full"></span>
												<span class="w-3 h-3 bg-yellow-500 rounded-full"></span>
												<span class="w-3 h-3 bg-green-500 rounded-full"></span>
											</div>
										</div>

										{# Bloc de code principal avec scrolling horizontal si nécessaire #}
										<pre class="relative bg-gradient-to-br from-gray-900 to-gray-800 rounded-b-lg overflow-x-auto">
                                        <code class="language-{{ question.langage.name|lower }} block p-4 text-sm md:text-base text-gray-100 font-mono leading-relaxed">
                                            {{- question.description -}}
                                        </code>                                                                
    									</pre>
									</div>


									{# Adaptatif pour les écrans très petits #}
									<div class="mt-1 text-right">
										<span class="text-xs text-gray-500">
											<span class="hidden xs:inline">Appuyez sur</span>
											<kbd class="px-1 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded">Ctrl</kbd>
											<span class="mx-1">+</span>
											<kbd class="px-1 py-0.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded">C</kbd>
											<span class="hidden xs:inline">pour copier</span>
										</span>
									</div>
								</div>
							{% else %}
								<p class="text-sm sm:text-base text-gray-700 mb-6 leading-relaxed whitespace-pre-line break-words">{{ question.description }}</p>
								{% if question.photo is defined and question.photo %}
									<div class="mb-4">
										<img class="w-full sm:h-auto md:h-64 lg:h-72 xl:h-80 2xl:h-96 object-cover shadow-sm rounded-lg" src="{{ asset('uploads/uploads/' ~ question.photo) }}" alt="Image de la publication{{question.user.name}}">
									</div>
								{% endif %}
							{% endif %}

							{# Catégorie et nombre de likes #}
							{# L'utilisateur a-t-il liké ? #}
							{% set hasLiked = question.postLikers|filter(pl => pl.user == app.user)|length > 0 %}

							<div class="flex items-center justify-between mb-6">
								<span class="inline-block bg-gray-100 text-gray-700 px-3 py-1.5 rounded-lg text-xs">{{ question.category.name }}</span>

								<button class="like-btn flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 transition-all duration-200" data-id="{{ question.id }}" data-liked="{{ hasLiked ? '1' : '0' }}">
									<i class="fas fa-heart mr-1 {{ hasLiked ? 'text-red-500' : 'text-neutral-600' }}"></i>
									<span id="like-count-{{ question.id }}">{{ question.postLikers|length }}</span>
									j'aime
								</button>
							</div>


							{# Actions: J'aime et En savoir plus #}
							<div class="flex items-center justify-between">

								<a href="{{ path('app_detail', {'id': question.id}) }}" class="inline-flex items-center justify-center gap-2 px-4 py-2.5
																				                                    font-medium text-white bg-[#F48023] hover:bg-[#e67620]
																				                                    rounded-lg transition-all duration-300
																				                                    transform hover:scale-105 hover:shadow-md
																				                                    focus:outline-none focus:ring-2 focus:ring-[#F48023] focus:ring-opacity-50">
									<span>En savoir plus</span>
									<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none" viewbox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"/>
									</svg>
								</a>
							</div>
						</div>
					</article>
				</section>
			{% endfor %}
		</div>
	</main>


		<script>
		let currentUserId = null;

function togglePopup(event) {

event.stopPropagation();
// Empêcher l'événement de se propager

// Fermer tous les popups déjà ouverts
document.querySelectorAll('.popup.block').forEach(p => {
p.classList.remove('block', 'opacity-100');
p.classList.add('hidden', 'opacity-0');
});

// Trouver la popup associée au bouton cliqué
const popup = event.currentTarget.nextElementSibling;

if (! popup || ! popup.classList.contains('popup')) {
console.error("Popup non trouvée!");
return;
}

// Vérifier si la popup est masquée
if (popup.classList.contains('hidden')) { // Afficher la popup
popup.classList.remove('hidden');
popup.classList.add('visible');

// Forcer un reflow pour assurer que la transition se déclenche
void popup.offsetWidth;

// Appliquer l'animation
popup.classList.remove('opacity-0');
popup.classList.add('opacity-100');
} else { // Cacher la popup
popup.classList.remove('opacity-100');
popup.classList.add('opacity-0');

setTimeout(() => {
popup.classList.remove('visible');
popup.classList.add('hidden');
}, 200);
}
}

function hidePopup(popup) {
popup.classList.remove('opacity-100');
popup.classList.add('opacity-0');
setTimeout(() => {
popup.classList.remove('block');
popup.classList.add('hidden');
}, 200);
}

// Fermer les popups lors d'un clic à l'extérieur
document.addEventListener('click', function (event) {
if (! event.target.closest('.popup') && ! event.target.closest('button[onclick="togglePopup(event)"]')) {
document.querySelectorAll('.popup:not(.hidden)').forEach(popup => {
hidePopup(popup);
});
}
});

// Fonction de filtre des publications par catégorie
function filterPosts(event, group) {
event.preventDefault();
// Mettre à jour la classe active sur les filtres
document.querySelectorAll('[data-group]').forEach(btn => {
if (btn.getAttribute('data-group') === group) {
btn.querySelector('span').classList.add('bg-[#e67620]');
btn.querySelector('span').classList.remove('bg-[#F48023]');
} else {
btn.querySelector('span').classList.add('bg-[#F48023]');
btn.querySelector('span').classList.remove('bg-[#e67620]');
}
});

document.querySelectorAll('section[data-group]').forEach(section => {
if (section.getAttribute('data-group') === group || group === 'all') {
section.style.display = 'flex';
} else {
section.style.display = 'none';
}
});
}

// Gestion des modales
function addUser(userId) {
currentUserId = userId;
openModal('add-user-modal');
}

function blockUser(userId) {
currentUserId = userId;
openModal('block-user-modal');
}

function openModal(modalId) {
const modal = document.getElementById(modalId);
const content = document.getElementById(modalId + '-content');

modal.classList.remove('hidden');
modal.classList.add('flex');

setTimeout(() => {
content.classList.remove('scale-95', 'opacity-0');
content.classList.add('scale-100', 'opacity-100');
}, 50);
}

function closeModal(modalId) {
const modal = document.getElementById(modalId);
const content = document.getElementById(modalId + '-content');

content.classList.remove('scale-100', 'opacity-100');
content.classList.add('scale-95', 'opacity-0');

setTimeout(() => {
modal.classList.remove('flex');
modal.classList.add('hidden');
}, 300);
}


document.addEventListener('DOMContentLoaded', function () { // Initialise highlight.js (une seule fois)
if (typeof hljs !== 'undefined') {
hljs.highlightAll();
}
});



//requet ajax pour les like 


document.querySelectorAll('.like-btn').forEach(button => {
	button.addEventListener('click', async (e) => {
		e.preventDefault();

		const publicationId = button.dataset.id;
		const heartIcon = button.querySelector('i');
		const likeCount = document.getElementById(`like-count-${publicationId}`);

		const response = await fetch(`/like/${publicationId}`, {
			method: 'POST',
			headers: {
				'X-Requested-With': 'XMLHttpRequest',
				'Content-Type': 'application/json'
			}
		});

		const data = await response.json();

		if (data.likes !== undefined) {
			likeCount.textContent = data.likes;

			// Toggle l'état du like
			const liked = button.dataset.liked === '1';
			if (liked) {
				heartIcon.classList.remove('text-red-500');
				heartIcon.classList.add('text-white');
				button.dataset.liked = '0';
			} else {
				heartIcon.classList.remove('text-white');
				heartIcon.classList.add('text-red-500');
				button.dataset.liked = '1';
			}
		}
	});
});

	</script>
{% endblock %}
